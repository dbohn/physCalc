{"version":3,"sources":["physik.coffee"],"names":[],"mappings":"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","file":"physik.js","sourceRoot":"/source/","sourcesContent":["# Calculcation of errors\n# @author Luca Keidel <info@lucakeidel.de>\n\n# Returns the number of digits after the comma\n#\n# @param [Float] num the number\n#\ndecimalPlaces = (num) ->\n  match = (''+num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/)\n  return 0 if not match\n  Math.max(0, (if match[1] then match[1].length else 0) - (if match[2] then +match[2] else 0))\n\n# Math.log10\nlog10 = Math.log10 or (x) ->\n  Math.log(x) / Math.LN10\n\n# Get the significant digits of a float.\n# Contrary to @code{toPrecision} this function ceils the result\n# Based on http://stackoverflow.com/a/1581007\n#\n# @param [Float] num the number\n# @param [Integer] n amount of significant digits desired\n#\nsignificantDigitsCeiling = (num, n) ->\n\n  if num is 0 then return 0\n \n  d = Math.ceil(log10(if num < 0 then -num else num))\n  power = n - Math.floor(d)\n\n  magnitude = Math.pow(10, power)\n  shifted = Math.ceil(num * magnitude)\n  shifted / magnitude\n\n\n# Represents an error interval\nclass ErrorInterval\n\n  # Constructs a new error interval (a +/- Delta a)\n  #\n  # @param [Float] median of the interval (a)\n  # @param [Float] radius of the interval (Delta a)\n  #\n  constructor: (median, radius) ->\n    @median = parseFloat(median)\n    @radius = parseFloat(radius)\n\n  # returns the relative Error\n  # @return [Float] relative error\n  #\n  relativeError: -> \n    parseFloat (@radius / @median).toPrecision(2)\n\n  # Adds another interval\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  add: (o) ->\n    a = @median + o.median\n    da = @radius + o.radius\n    new ErrorInterval(a, da).intermediateResult()\n\n  # Subtracts another interval\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  sub: (o) ->\n    a = @median - o.median\n    da = @radius + o.radius\n    new ErrorInterval(a, da).intermediateResult()\n\n  # Multiplies with another interval\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  mult: (o) ->\n    a = @median * o.median\n    rel = (@.relativeError() + o.relativeError()).toPrecision(2)\n    da = (rel * a).toPrecision(2)\n\n    new ErrorInterval(a, da).intermediateResult()\n\n  # Divides by another interval\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  div: (o) ->\n    a = @median / o.median\n    rel = (@.relativeError() + o.relativeError()).toPrecision(2)\n    da = (rel * a).toPrecision(2)\n\n    new ErrorInterval(a, da).intermediateResult()\n\n  # Calculates the power\n  #\n  # @param [Float] exp the exponent\n  # @return [ErrorInterval] result\n  pow: (exp) ->\n    a = Math.pow(@median, exp)\n    rel = (@.relativeError() * Math.abs(exp)).toPrecision(2)\n    da = (rel * a).toPrecision(2)\n\n    new ErrorInterval(a, da).intermediateResult()\n\n  # Multiplies the interval with a scalar\n  #\n  # @param [Number] c the scalar\n  # @return [ErrorInterval] result\n  scalar: (c) ->\n    (@mult new ErrorInterval(c,0)).intermediateResult()\n\n  # Applys a function @code{f} to the interval.\n  # The function has to accept one parameter and\n  # has to return a numerical value.\n  #\n  # @param [Function] f the function\n  # @return [ErrorInterval] result\n  apply: (f) ->\n    k = f(@median)\n    dk = Math.abs(f((@median + @radius)) - k)\n    new ErrorInterval(k, dk).intermediateResult()\n\n  # Create an error interval based on this interval\n  # with the precision of end results.\n  #\n  # @return [ErrorInterval] result\n  endResult: ->\n    resRadius = significantDigitsCeiling(@radius, 1)\n    resMedian = @median.toFixed  (decimalPlaces resRadius)\n\n    new EndResult(resMedian, resRadius)\n\n  # Create an error interval based on this interval\n  # with the precision of intermediate results.\n  #\n  # @return [ErrorInterval] result\n  intermediateResult: ->\n    resRadius = @radius.toPrecision(2)\n    resMedian = @median.toFixed  (decimalPlaces resRadius)\n  \n    new ErrorInterval(resMedian, resRadius)    \n\n  # @return [String]\n  toString: ->\n    '['+@.getMedian()+'+-'+@.getRadius()+']'\n\n  # Returns the median with the same number of digits after the comma \n  # as the radius\n  #\n  # @return [String]\n  getMedian: ->\n    @median.toFixed(decimalPlaces(@.getRadius()))\n\n  # Returns the radius\n  #\n  # @return [String]\n  getRadius: ->\n    (''+@radius.toPrecision(2))\n\nclass EndResult extends ErrorInterval\n  \n  getRadius: ->\n    (''+@radius.toPrecision(1))\n\n\n# Creates an error interval based on an\n# analog measurement\n#\n# @param [ErrorInterval] val the datum\n# @param [Float] k the quality\n# @param [Float] range range\n# \n# @return [ErrorInterval] result\ncreateFromAnalogMeasurement = (val, k, range) ->\n  dk = (k / 100) * range\n  da = val.radius\n  new ErrorInterval(val.median, (dk+da)).intermediateResult()\n\n# Creates an error interval based on an\n# digital measurement\n#\n# @param [ErrorInterval] val the datum\n# @param [Float] p \n# @param [Integer] d\n# \n# @return [ErrorInterval] result\ncreateFromDigitalMeasurement = (val, p, d) ->\n  da = ((p / 100) * val.median)\n  da += d * Math.pow(10, -decimalPlaces val.median)  \n  new ErrorInterval(val.median, da).intermediateResult()\n\n# Sinus function which can be used in \n# the ErrorInterval.apply() function\n#\n# @param [Float] v Value\n# \n# @return [Float] result\nsin = (v) ->\n  Math.sin(v * (Math.PI / 180))\n\n# Cosinus function which can be used in \n# the ErrorInterval.apply() function\n#\n# @param [Float] v Value\n# \n# @return [Float] result\ncos = (v) ->\n  Math.cos(v * (Math.PI / 180))\n\n# Tangens function which can be used in \n# the ErrorInterval.apply() function\n#\n# @param [Float] v Value\n# \n# @return [Float] result\ntan = (v) ->\n  Math.tan(v * (Math.PI / 180))\n\nmodule.exports = {ErrorInterval, log10, sin, cos, tan, createFromAnalogMeasurement, createFromDigitalMeasurement}"]}