{"version":3,"sources":["physik.coffee"],"names":[],"mappings":"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","file":"physik.js","sourceRoot":"/source/","sourcesContent":["# Calculcation of errors\n# @author Luca Keidel <info@lucakeidel.de>\n\n# Returns the number of digits after the comma\n#\n# @param [Float] num the number\n#\ndecimalPlaces = (num) ->\n  match = (''+num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/)\n  return 0 if not match\n  Math.max(0, (if match[1] then match[1].length else 0) - (if match[2] then +match[2] else 0))\n\n# Math.log10\nlog10 = Math.log10 or (x) ->\n  Math.log(x) / Math.LN10\n\n# Get the significant digits of a float.\n# Contrary to @code{toPrecision} this function ceils the result\n# Based on http://stackoverflow.com/a/1581007\n#\n# @param [Float] num the number\n# @param [Integer] n amount of significant digits desired\n#\nsignificantDigitsCeiling = (num, n) ->\n\n  if num is 0 then return 0\n \n  d = Math.ceil(log10(if num < 0 then -num else num))\n  power = n - Math.floor(d)\n\n  magnitude = Math.pow(10, power)\n  shifted = Math.ceil(num * magnitude)\n  shifted / magnitude\n\n\n# Represents an error interval\nclass ErrorInterval\n\n  # Constructs a new error interval (a +/- Delta a)\n  #\n  # @param [Float] median of the interval (a)\n  # @param [Float] radius of the interval (Delta a)\n  #\n  constructor: (median, radius) ->\n    @median = parseFloat(median)\n    @radius = parseFloat(radius)\n\n\n  # returns the relative Error\n  # @return [Float] relative error\n  #\n  relativeError: -> \n    parseFloat (@radius / @median).toPrecision(2)\n\n  # Adds another interval\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  add: (o) ->\n    a = @median + o.median\n    da = (@radius + o.radius).toPrecision(2)\n\n    new ErrorInterval(a.toFixed(decimalPlaces(da)), da)\n\n  # Subtracts another interval\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  sub: (o) ->\n    a = @median - o.median\n    da = (@radius + o.radius).toPrecision(2)\n\n    new ErrorInterval(a.toFixed(decimalPlaces(da)), da)\n\n  # Multiplies with another interval\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  mult: (o) ->\n    a = @median * o.median\n    rel = (@.relativeError() + o.relativeError()).toPrecision(2)\n    da = (rel * a).toPrecision(2)\n\n    new ErrorInterval(a.toFixed(decimalPlaces(da)), da)\n\n  # Divides by another interval\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  div: (o) ->\n    a = @median / o.median\n    rel = (@.relativeError() + o.relativeError()).toPrecision(2)\n    da = (rel * a).toPrecision(2)\n\n    new ErrorInterval(a.toFixed(decimalPlaces(da)), da)\n\n  # Calculates the power\n  #\n  # @param [Float] exp the exponent\n  # @return [ErrorInterval] result\n  pow: (exp) ->\n    a = Math.pow(@median, exp)\n    rel = (@.relativeError() * Math.abs(exp)).toPrecision(2)\n    da = (rel * a).toPrecision(2)\n\n    new ErrorInterval(a.toFixed(decimalPlaces(da)), da)\n\n  # Multiplies the interval with a scalar\n  #\n  # @param [Number] c the scalar\n  # @return [ErrorInterval] result\n  scalar: (c) ->\n    @mult new ErrorInterval(c,0)\n\n  # Applys a function @code{f} to the interval.\n  # The function has to accept one parameter and\n  # has to return a numerical value.\n  #\n  # @param [Function] f the function\n  # @return [ErrorInterval] result\n  apply: (f) ->\n    k = f(@median)\n\n    dk = Math.abs(f((@median + @radius)) - k).toPrecision(2)\n\n    new ErrorInterval(k.toFixed(decimalPlaces(dk)), dk)\n\n  # Create an error interval based on this interval\n  # with the precision of end results.\n  #\n  # @param [ErrorInterval] o the other interval\n  # @return [ErrorInterval] result\n  endResult: ->\n    resRadius = significantDigitsCeiling(@radius, 1)\n    resMedian = @median.toFixed  (decimalPlaces resRadius)\n\n    new ErrorInterval(resMedian, resRadius)\n\n  intermediateResult: ->\n    resRadius = @radius.toPrecision(2)\n    resMedian = @median.toFixed  (decimalPlaces resRadius)\n  \n    new ErrorInterval(resMedian, resRadius)    \n\n  # @return [String]\n  toString: ->\n    @median+' '+@radius\n\n  # Returns the median with the same number of digits after the comma \n  # as the radius\n  #\n  # @return [String]\n  getMedian: ->\n    @median.toFixed(decimalPlaces(@radius))\n\n  # Returns the radius\n  #\n  # @return [String]\n  getRadius: ->\n    (''+@radius)\n\n\n# Creates an error interval based on an\n# analog measurement\n#\n# @param [ErrorInterval] val the datum\n# @param [Float] k the quality\n# @param [Float] range range\n# \n# @return [ErrorInterval] result\ncreateFromAnalogMeasurement = (val, k, range) ->\n  dk = (k / 100) * range\n  da = val.radius\n  new ErrorInterval(val.median, (dk+da))\n\n# Creates an error interval based on an\n# digital measurement\n#\n# @param [ErrorInterval] val the datum\n# @param [Float] p \n# @param [Integer] d\n# \n# @return [ErrorInterval] result\ncreateFromDigitalMeasurement = (val, p, d) ->\n  da = ((p / 100) * val.median)\n  da += d * Math.pow(10, -decimalPlaces val.median)  \n  new ErrorInterval(val.median, da)\n\naufg4 = ->\n  new ErrorInterval(52.684063, 0.0176228).endResult()\n\naufg6 = ->\n  new ErrorInterval(34.7, 7.6).relativeError()\n\naufg8 = ->\n  l1 = new ErrorInterval(200, 0.5)\n  l2 = new ErrorInterval(200, 0.5)\n  l3 = new ErrorInterval(104.7, 1.5)\n  l1.add(l2).add(l3).endResult()\n\naufg9 = ->\n  s = new ErrorInterval(100,10)\n  t = new ErrorInterval(11.2,0.3)\n  s.div(t).scalar(3.6).endResult()\n\naufg10 = ->\n  r = new ErrorInterval(1.000,0.002)\n  t0 = new ErrorInterval(20.00,0.11)\n  t1 = new ErrorInterval(2.4,0.2)\n  t0.div(t1).pow(0.5).mult(r).endResult()\n\n\naufg11_example = ->\n  a = new ErrorInterval(62.4,0.2)\n  b = new ErrorInterval(11.2,0.2)\n  c = new ErrorInterval(9.2,0.2)\n  a.sub(b).div(c).endResult()\n\n\naufg11 = ->\n  t = new ErrorInterval(71, 2)\n  s = new ErrorInterval(400, 5)\n  new ErrorInterval(1000,0).div(s.div(t)).endResult()\n\naufg12 = ->\n  mu = new ErrorInterval(632.8, 0)\n  alpha = new ErrorInterval(13.4, 0.5)\n  sinAlpha = alpha.apply((val) -> Math.sin(val * (Math.PI/180)));\n  mu.div(sinAlpha).scalar(0.001).endResult()\n\nsin = (v) ->\n  Math.sin(v * (Math.PI / 180))\n\ncos = (v) ->\n  Math.cos(v * (Math.PI / 180))\n\ntan = (v) ->\n  Math.tan(v * (Math.PI / 180))\n\nmodule.exports = {ErrorInterval, aufg4, aufg6, aufg8, aufg9, aufg10, aufg11_example, aufg11, aufg12, sin, cos, tan, createFromAnalogMeasurement, createFromDigitalMeasurement}"]}