{"version":3,"sources":["parsertools.coffee"],"names":[],"mappings":"AAGA;AAAA,MAAA,4DAAA;;AAAA,EAAA,MAAA,GAAS,OAAA,CAAQ,UAAR,CAAT,CAAA;;AAAA,EAEA,GAAA,GAAM,SAAC,CAAD,EAAI,CAAJ,GAAA;AACL,IAAA,CAAA,GAAI,OAAA,CAAQ,CAAR,CAAJ,CAAA;AAAA,IACA,CAAA,GAAI,OAAA,CAAQ,CAAR,CADJ,CAAA;WAEA,CAAC,CAAC,GAAF,CAAM,CAAN,EAHK;EAAA,CAFN,CAAA;;AAAA,EAOA,GAAA,GAAM,SAAC,CAAD,EAAI,CAAJ,GAAA;AACL,IAAA,CAAA,GAAI,OAAA,CAAQ,CAAR,CAAJ,CAAA;AAAA,IACA,CAAA,GAAI,OAAA,CAAQ,CAAR,CADJ,CAAA;WAEA,CAAC,CAAC,GAAF,CAAM,CAAN,EAHK;EAAA,CAPN,CAAA;;AAAA,EAYA,IAAA,GAAO,SAAC,CAAD,EAAI,CAAJ,GAAA;AACN,IAAA,CAAA,GAAI,OAAA,CAAQ,CAAR,CAAJ,CAAA;AAAA,IACA,CAAA,GAAI,OAAA,CAAQ,CAAR,CADJ,CAAA;WAEA,CAAC,CAAC,IAAF,CAAO,CAAP,EAHM;EAAA,CAZP,CAAA;;AAAA,EAiBA,GAAA,GAAM,SAAC,CAAD,EAAI,CAAJ,GAAA;AACL,IAAA,CAAA,GAAI,OAAA,CAAQ,CAAR,CAAJ,CAAA;AAAA,IACA,CAAA,GAAI,OAAA,CAAQ,CAAR,CADJ,CAAA;WAEA,CAAC,CAAC,GAAF,CAAM,CAAN,EAHK;EAAA,CAjBN,CAAA;;AAAA,EAsBA,GAAA,GAAM,SAAC,IAAD,EAAO,GAAP,GAAA;AACL,IAAA,IAAG,GAAA,YAAe,MAAM,CAAC,aAAtB,IAAwC,GAAG,CAAC,MAAJ,KAAc,CAAzD;AAAgE,YAAM,8BAAN,CAAhE;KAAA;AAAA,IACA,GAAA,GAAS,GAAA,YAAe,MAAM,CAAC,aAAzB,GAA4C,GAAG,CAAC,MAAhD,GAA4D,GADlE,CAAA;AAAA,IAEA,IAAA,GAAO,OAAA,CAAQ,IAAR,CAFP,CAAA;WAGA,IAAI,CAAC,GAAL,CAAS,GAAT,EAJK;EAAA,CAtBN,CAAA;;AAAA,EA4BA,SAAA,GAAY,SAAC,CAAD,GAAA;AACX,IAAA,IAAG,CAAA,YAAa,MAAM,CAAC,aAAvB;aAA0C,CAAC,CAAC,SAAF,CAAA,EAA1C;KAAA,MAAA;aAA6D,EAA7D;KADW;EAAA,CA5BZ,CAAA;;AAAA,EA+BA,MAAA,GAAS,SAAC,MAAD,EAAS,UAAT,GAAA;WACJ,IAAA,MAAM,CAAC,aAAP,CAAqB,MAArB,EAA6B,UAA7B,EADI;EAAA,CA/BT,CAAA;;AAAA,EAkCA,OAAA,GAAU,SAAC,CAAD,GAAA;AACT,IAAA,IAAG,CAAA,CAAE,CAAA,YAAa,MAAM,CAAC,aAArB,CAAJ;aAA6C,MAAA,CAAO,CAAP,EAAU,CAAV,EAA7C;KAAA,MAAA;aAA+D,EAA/D;KADS;EAAA,CAlCV,CAAA;;AAAA,EAqCA,MAAM,CAAC,OAAP,GAAiB;AAAA,IAAC,KAAA,GAAD;AAAA,IAAM,KAAA,GAAN;AAAA,IAAW,MAAA,IAAX;AAAA,IAAiB,KAAA,GAAjB;AAAA,IAAsB,KAAA,GAAtB;AAAA,IAA2B,QAAA,MAA3B;AAAA,IAAmC,WAAA,SAAnC;GArCjB,CAAA;AAAA","file":"parsertools.js","sourceRoot":"/source/","sourcesContent":["# Glue code between Physik-Library and parser\n# @author David Bohn <david.bohn@cancrisoft.net>\n\nPhysik = require('./physik');\n\nadd = (a, b) ->\n\ta = convVal(a)\n\tb = convVal(b)\n\ta.add(b)\n\nsub = (a, b) ->\n\ta = convVal(a)\n\tb = convVal(b)\n\ta.sub(b)\n\nmult = (a, b) ->\n\ta = convVal(a)\n\tb = convVal(b)\n\ta.mult(b)\n\ndiv = (a, b) ->\n\ta = convVal(a)\n\tb = convVal(b)\n\ta.div(b)\n\npow = (base, exp) ->\n\tif exp instanceof Physik.ErrorInterval and exp.radius != 0 then throw 'Exponent must not have error'\n\texp = if exp instanceof Physik.ErrorInterval then exp.median else exp\n\tbase = convVal(base)\n\tbase.pow(exp)\n\nendResult = (a) ->\n\tif a instanceof Physik.ErrorInterval then a.endResult() else a\n\ncreate = (median, derivation) ->\n\tnew Physik.ErrorInterval(median, derivation)\n\nconvVal = (a) ->\n\tif !(a instanceof Physik.ErrorInterval) then create(a, 0) else a\n\nmodule.exports = {add, sub, mult, div, pow, create, endResult}"]}