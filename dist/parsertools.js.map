{"version":3,"sources":["parsertools.coffee"],"names":[],"mappings":"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","file":"parsertools.js","sourceRoot":"/source/","sourcesContent":["###\n# Glue code between Physik-Library and parser\n# @author David Bohn <david.bohn@cancrisoft.net>\n###\n\nPhysik = require('./physik');\n\n# Adds two values, which should be either ErrorIntervals or numerical values\n#\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @return [Physik.ErrorInterval] The sum of a and b\nadd = (a, b) ->\n\ta = convVal(a)\n\tb = convVal(b)\n\ta.add(b)\n\n# Subtracts two values, which should be either ErrorIntervals or numerical values\n#\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @return [Physik.ErrorInterval] The sum of a and b\nsub = (a, b) ->\n\ta = convVal(a)\n\tb = convVal(b)\n\ta.sub(b)\n\n# Mutliplies two values, which should be either ErrorIntervals or numerical values\n#\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @return [Physik.ErrorInterval] The sum of a and b\nmult = (a, b) ->\n\ta = convVal(a)\n\tb = convVal(b)\n\ta.mult(b)\n\n# Divides a by b, which should be either ErrorIntervals or numerical values\n#\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @return [Physik.ErrorInterval] The sum of a and b\ndiv = (a, b) ->\n\ta = convVal(a)\n\tb = convVal(b)\n\ta.div(b)\n\n# Calculates base to the power of exp\n#\n# @param [Float|Physik.ErrorInterval] Should be a ErrorInterval, otherwise it will be converted\n# @param [Float|Physik.ErrorInterval] If it is an ErrorInterval, the radius *must* be 0\n# @return [Physik.ErrorInterval] base^exp\npow = (base, exp) ->\n\tif exp instanceof Physik.ErrorInterval and exp.radius != 0 then throw 'Exponent must not have error'\n\texp = if exp instanceof Physik.ErrorInterval then exp.median else exp\n\tbase = convVal(base)\n\tbase.pow(exp)\n\n# If the given parameter is an ErrorInterval, a valid representation for a end result will be\n# generated. Otherwise itself will be returned\n#\n# @param [Physik.ErrorInterval|Float] Formats an ErrorInterval according the rules\nendResult = (a) ->\n\tif a instanceof Physik.ErrorInterval then a.endResult() else a\n\n# Creates a new ErrorInterval\n#\n# @param [Float] The main value\n# @param [Float] The error radius around the main value\ncreate = (median, derivation) ->\n\tnew Physik.ErrorInterval(median, derivation)\n\ncreateFromDigital = (median, percentage, digit) ->\n\tPhysik.createFromDigitalMeasurement(convVal(median), Math.abs(percentage), Math.abs(digit))\n\ncreateFromAnalogue = (measured, grade, interval) ->\n\tPhysik.createFromAnalogMeasurement(convVal(measured), Math.abs(grade), Math.abs(interval))\n\napplyOperator = (operator, operand) ->\n\toperator = operator.toLowerCase()\n\toperand = convVal(operand)\n\t# TODO: throw exception for unknown operand!\n\tswitch operator\n\t\twhen \"sin\" then operand = operand.apply(Physik.sin)\n\t\twhen \"cos\" then operand = operand.apply(Physik.cos)\n\t\twhen \"tan\" then operand = operand.apply(Physik.tan)\n\t\twhen \"asn\" then operand = operand.apply(asin)\n\t\twhen \"acs\" then operand = operand.apply(acos)\n\t\twhen \"atn\" then operand = operand.apply(atan)\n\t\twhen \"log\" then operand = operand.apply(Math.log)\n\t\twhen \"lgt\" then operand = operand.apply(Physik.log10)\n\t\telse operand = operand\n\toperand\n\nconvVal = (a) ->\n\tif !(a instanceof Physik.ErrorInterval) then create(a, 0) else a\n\nasin = (rad) ->\n\tMath.asin(rad)*(180/Math.PI)\n\nacos = (rad) ->\n\tMath.acos(rad)*(180/Math.PI)\n\natan = (rad) ->\n\tMath.atan(rad)*(180/Math.PI)\n\nmodule.exports = {add, sub, mult, div, pow, create, endResult, convVal, applyOperator, createFromDigital, createFromAnalogue}\n"]}